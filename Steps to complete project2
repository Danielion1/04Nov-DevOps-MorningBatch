

Project 2:

Cretae a VM

install git, jenkins & docker

On jenkins

Step1:

Install plugin Docker pipeline

Docker Pipeline

................

Step 2:

Create credentials in Jenkinsfor dockerhub to push images to dockerhub

Step 3:

Take the code and write dockerfile for it . Maintain the dockerfile in github repo

https://github.com/purduedemo/ELKExample.git



FROM maven:3.5.2-jdk-8

RUN mkdir -p /app

COPY . /app

WORKDIR /app

CMD mvn spring-boot:run


Ste 4: Write a pipeline code to build the dockerfile


in the same repo write the jenkins file with pipeline code



stage (clone the repo)

stage(build the code)

stage(build the image)

stage(push the image)


docker login

docker push dockerhubaccount/imagename:tagename

docker push sonal04/springbootapp



${dockerhubaccountid}/${application}:${BUILD_NUMBER}

sonal04/springbootapp:2


Step 4:

use the edureka lab --> kubernetes cluster

create deploument yaml file to create replicas of the image : sonal04/springbootapp:2


deploy HPA

generate load --> which will increase the pods

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: nginxpod
      labels:
        app: nginx
    spec:
      containers:
        - name: c1
          image: sonal04/springbootapp:2
          resources:
            limits:
              cpu: 10m

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  type: ClusterIP  ## this is default if we do not type in service definition
  selector:
    app: nginx
  ports:
   - protocol: TCP
     port: 8080
     targetPort: 8080

---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 5


--> step 5: deploy prometheous and grafana pod .. moniotr the deployment




